(
Pbindef(\forward,\bus,Pseq((0..5).pyramid(1),1) + ~lightsBus.index).play(~metro.base ,quant:~metro.base.beatsPerBar);
)

// elements
(0..5).pyramid(1);
[ 0, 0, 1, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5 ].size;

// elements
(0..5).pyramid(2);
[ 5, 4, 5, 3, 4, 5, 2, 3, 4, 5, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5 ].size

// elements
(0..5).pyramid(3);
[ 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 4, 5, 5 ].size

// elements
(0..5).pyramid(4);
[ 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 4, 5, 5 ].size

// elements
(0..5).pyramid(5);
[ 0, 0, 1, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0 ].size

// elements
(0..5).pyramid(6);
[ 5, 4, 5, 3, 4, 5, 2, 3, 4, 5, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 4, 5, 5 ].size

// 41 elements
(0..5).pyramid(7);
[ 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0, 0, 1, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5 ].size

// 41 elements
(0..5).pyramid(8);
[ 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 4, 5, 5, 4, 5, 3, 4, 5, 2, 3, 4, 5, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5 ].size;

// 36 elements
(0..5).pyramid(9);
[ 0, 0, 1, 0, 1, 2, 0, 1, 2, 3, 0, 1, 2, 3, 4, 0, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5, 2, 3, 4, 5, 3, 4, 5, 4, 5, 5 ].size;


// 36 elements
(0..5).pyramid(10);
[ 5, 4, 5, 3, 4, 5, 2, 3, 4, 5, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 5, 0, 1, 2, 3, 4, 0, 1, 2, 3, 0, 1, 2, 0, 1, 0 ].size;

/*
powerset
Returns all possible combinations of the array's elements.
*/

(0..5).powerset.postln;
(0..5).powerset.sort({ |a, b| a.size > b.size }); // sort by size, big first
(0..5).powerset.sort({ |a, b| a.size > b.size }).reverse; // by size, small first


/*Slide*/
(0..5).slide(2, 1).asCompileString.postln;
[ 0, 1, 1, 2, 2, 3, 3, 4, 4, 5 ]


(0..5).slide(3, 1).asCompileString.postln;
[ 0, 1, 2, 1, 2, 3, 2, 3, 4, 3, 4, 5 ]

(0..5).slide(4, 1).asCompileString.postln;
[ 0, 1, 2, 3, 1, 2, 3, 4, 2, 3, 4, 5 ]

(0..5).slide(5, 1).asCompileString.postln;
[ 0, 1, 2, 3, 4, 1, 2, 3, 4, 5 ]

// 3 elements
(0..5).slide(1, 2).asCompileString.postln;
[ 0, 2, 4 ]


(0..5).slide(3, 2).asCompileString.postln;
[ 0, 1, 2, 2, 3, 4 ]

(0..5).slide(4, 2).asCompileString.postln;
[ 0, 1, 2, 3, 2, 3, 4, 5 ]

(0..5).slide(5, 2).asCompileString.postln;
[ 0, 1, 2, 3, 4 ]


(0..5).slide(1, 3).asCompileString.postln;
[ 0, 3 ]

(0..5).slide(2, 3).asCompileString.postln;
[ 0, 1, 3, 4 ]


(0..5).slide(4, 3).asCompileString.postln;
[ 0, 1, 2, 3 ]
(0..5).slide(5, 3).asCompileString.postln;
[ 0, 1, 2, 3, 4 ]
(0..5).slide(6, 3).asCompileString.postln;
[ 0, 1, 2, 3, 4, 5 ]



(0..5).slide(1, 4).asCompileString.postln;
[ 0, 4 ]

(0..5).slide(2, 4).asCompileString.postln;
[ 0, 1, 4, 5 ]

(0..5).slide(3, 4).asCompileString.postln;
[ 0, 1, 2 ]

(0..5).slide(4, 4).asCompileString.postln;
[ 0, 1, 2, 3 ]
(0..5).slide(5, 4).asCompileString.postln;
[ 0, 1, 2, 3, 4 ]
(0..5).slide(6, 4).asCompileString.postln;
[ 0, 1, 2, 3, 4, 5 ]


(0..5).slide(1, 5).asCompileString.postln;
[ 0, 5 ]
(0..5).slide(2, 5).asCompileString.postln;
[ 0, 1 ]
(0..5).slide(3, 5).asCompileString.postln;
[ 0, 1, 2 ]
(0..5).slide(4, 5).asCompileString.postln;
[ 0, 1, 2, 3 ]
(0..5).slide(5, 5).asCompileString.postln;
[ 0, 1, 2, 3, 4 ]
(0..5).slide(6, 5).asCompileString.postln;
[ 0, 1, 2, 3, 4, 5 ]




// write to a .png
~aplot = (0..5).slide(5,2).plot(bounds: Rect(left: 0, top: 400, width: 600, height: 400),discrete: false, numChannels: 1, separately: false );
i = Image.fromWindow(~aplot.parent, ~aplot.interactionView.bounds);
i.write("~/desktop/slide(5,2).png".standardizePath);
i.free;

(
    10.do({ arg i;
    	(0..5).pyramidg(i + 1).postln;
    });
)

(0..5).pyramidg(1);
// pyramidg(1) 6 arrays
![pyramidg(1)|420x66, 50%](upload://56ugjrF2F49ClqRLrXvLS8Tqs7g.gif)
[ [ 0 ], [ 0, 1 ], [ 0, 1, 2 ], [ 0, 1, 2, 3 ], [ 0, 1, 2, 3, 4 ], [ 0, 1, 2, 3, 4, 5 ] ]

// pyramidg(2) 6
![pyramidg(2)|420x66, 50%](upload://nl7D6zFVN9ra8GCrlZBPZZlRIsf.gif)
[ [ 5 ], [ 4, 5 ], [ 3, 4, 5 ], [ 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 0, 1, 2, 3, 4, 5 ] ]

// pyramidg(3) 6 arrays
![pyramidg(3)|420x66, 50%](upload://aekAz8n5CaXQNT7qkhuHL46EHNi.gif)
[ [ 0, 1, 2, 3, 4, 5 ], [ 0, 1, 2, 3, 4 ], [ 0, 1, 2, 3 ], [ 0, 1, 2 ], [ 0, 1 ], [ 0 ] ]

// pyramidg(4) 6 arrays
![pyramidg(4)|420x66, 50%](upload://xnkH4oZZpWqwpv3PE7dn108Fs9P.gif)
[ [ 0, 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 2, 3, 4, 5 ], [ 3, 4, 5 ], [ 4, 5 ], [ 5 ] ]

// pyramidg(5) 11 arrays
 arrays![pyramidg(5)|420x66, 50%](upload://fQ58fZSnTGcrmUtP4Z9gkjF7z1J.gif)
[ [ 0 ], [ 0, 1 ], [ 0, 1, 2 ], [ 0, 1, 2, 3 ], [ 0, 1, 2, 3, 4 ], [ 0, 1, 2, 3, 4, 5 ], [ 0, 1, 2, 3, 4 ], [ 0, 1, 2, 3 ], [ 0, 1, 2 ], [ 0, 1 ], [ 0 ] ]


// pyramidg(6) 11 arrays
![pyramidg(6)|420x66, 50%](upload://m3HZbagFMowg91wD5VVEfb9RK6y.gif) !!
[ [ 5 ], [ 4, 5 ], [ 3, 4, 5 ], [ 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 0, 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 2, 3, 4, 5 ], [ 3, 4, 5 ], [ 4, 5 ], [ 5 ] ]

// pyramidg(7) 11 arrays
![pyramidg(7)|420x66, 50%](upload://uhIi77yHothrTJVFP58ZAvG5rMt.gif)
[ [ 0, 1, 2, 3, 4, 5 ], [ 0, 1, 2, 3, 4 ], [ 0, 1, 2, 3 ], [ 0, 1, 2 ], [ 0, 1 ], [ 0 ], [ 0, 1 ], [ 0, 1, 2 ], [ 0, 1, 2, 3 ], [ 0, 1, 2, 3, 4 ], [ 0, 1, 2, 3, 4, 5 ] ]

// pyramidg(8) 11 arrays
![pyramidg(8)|420x66, 50%](upload://t5rsVAa88HNxqN8hZ4RlTLGbrRk.gif)
[ [ 0, 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 2, 3, 4, 5 ], [ 3, 4, 5 ], [ 4, 5 ], [ 5 ], [ 4, 5 ], [ 3, 4, 5 ], [ 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 0, 1, 2, 3, 4, 5 ] ]


// pyramidg(9) 11 arrays
![pyramidg(9)|420x66, 50%](upload://xzwBa1PUG28OVpEXRQo8PrWocIO.gif)
[ [ 0 ], [ 0, 1 ], [ 0, 1, 2 ], [ 0, 1, 2, 3 ], [ 0, 1, 2, 3, 4 ], [ 0, 1, 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 2, 3, 4, 5 ], [ 3, 4, 5 ], [ 4, 5 ], [ 5 ] ]

// pyramidg(10) 11 arrays
![pyramidg(10)|420x66, 50%](upload://2UNRdbSZXy47zsY5lJHBfArUpMd.gif)
[ [ 5 ], [ 4, 5 ], [ 3, 4, 5 ], [ 2, 3, 4, 5 ], [ 1, 2, 3, 4, 5 ], [ 0, 1, 2, 3, 4, 5 ], [ 0, 1, 2, 3, 4 ], [ 0, 1, 2, 3 ], [ 0, 1, 2 ], [ 0, 1 ], [ 0 ] ]




https://github.com/DarienBrito/Self_Similar/blob/master/1.Counting_123.scd
https://composerprogrammer.com/teaching/supercollider/sctutorial/9.1%20Algorithmic%20Strategies.html
http://www.musicaecodice.it/SC_Controllo/SC_Controllo.php

(0..5).stutter(2).postln;
[ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 ]

(0..5).stutter(3).postln;
[ 0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5 ]

(0..5).stutter(4).postln;
[ 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5 ]


(0..5).stutter(2).postln;
[ 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5 ]


.sputter(probability: 0.25, maxlen: 100)
Return a new Array of length maxlen with the items partly repeated (random choice of given probability).
// compare:
10.do{(0..5).sputter(0.1, 6).postln;};
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 3, 4 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 3, 4 ]
[ 0, 1, 2, 3, 3, 4 ]

10.do{(0..5).sputter(0.1, 100).postln;};
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 3, 3, 3, 4, 5, 5 ]
[ 0, 0, 1, 2, 2, 3, 4, 5 ]
[ 0, 1, 2, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 2, 3, 4, 5 ]
[ 0, 1, 1, 2, 2, 3, 4, 5 ]
[ 0, 1, 1, 2, 3, 4, 5 ]


10.do{(0..5).sputter(0.2, 6).postln;};
[ 0, 1, 2, 3, 4, 4 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 3, 3 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 3, 3 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 3, 4 ]
[ 0, 1, 2, 2, 3, 4 ]


10.do{(0..5).sputter(0.2, 100).postln;};
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 2, 3, 4, 5 ]
[ 0, 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 3, 4, 5 ]
[ 0, 1, 1, 2, 3, 3, 4, 4, 5 ]
[ 0, 1, 1, 2, 3, 3, 4, 5 ]
[ 0, 0, 1, 2, 3, 3, 4, 5, 5 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 1, 2, 3, 4, 5 ]


10.do{(0..5).sputter(0.3, 6).postln;};
[ 0, 1, 2, 3, 3, 4 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 0, 1, 1, 2, 3 ]
[ 0, 1, 2, 3, 3, 3 ]
[ 0, 0, 1, 2, 2, 3 ]
[ 0, 0, 1, 2, 3, 4 ]
[ 0, 1, 2, 3, 4, 5 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 1, 1, 1, 2, 3 ]
[ 0, 1, 1, 2, 2, 3 ]

10.do{(0..5).sputter(0.3, 100).postln;};
[ 0, 1, 2, 2, 3, 4, 4, 5 ]
[ 0, 1, 2, 2, 3, 4, 5, 5 ]
[ 0, 0, 1, 2, 3, 3, 4, 4, 5 ]
[ 0, 0, 1, 1, 1, 2, 3, 3, 4, 5 ]
[ 0, 1, 2, 2, 3, 4, 4, 5, 5, 5, 5, 5, 5 ]
[ 0, 1, 1, 2, 3, 4, 5, 5 ]
[ 0, 1, 2, 3, 3, 4, 5, 5, 5 ]
[ 0, 0, 1, 1, 2, 3, 4, 5, 5, 5 ]
[ 0, 0, 1, 2, 3, 3, 4, 4, 5 ]
[ 0, 0, 1, 2, 3, 4, 5 ]



10.do{(0..5).sputter(0.4, 6).postln;};
[ 0, 0, 1, 1, 1, 1 ]
[ 0, 0, 1, 2, 2, 2 ]
[ 0, 0, 0, 0, 1, 2 ]
[ 0, 1, 2, 3, 3, 3 ]
[ 0, 0, 0, 0, 1, 2 ]
[ 0, 1, 2, 2, 3, 4 ]
[ 0, 1, 2, 3, 3, 4 ]
[ 0, 0, 1, 1, 2, 3 ]
[ 0, 0, 1, 1, 2, 3 ]
[ 0, 1, 1, 2, 2, 3 ]

10.do{(0..5).sputter(0.4, 100).postln;};
[ 0, 0, 1, 2, 2, 3, 4, 5 ]
[ 0, 0, 0, 1, 2, 2, 3, 4, 4, 5, 5 ]
[ 0, 1, 2, 3, 3, 4, 5 ]
[ 0, 1, 1, 2, 3, 3, 4, 5, 5 ]
[ 0, 1, 2, 3, 3, 4, 4, 5, 5 ]
[ 0, 0, 0, 0, 1, 2, 3, 3, 4, 5, 5 ]
[ 0, 0, 0, 0, 0, 1, 1, 2, 3, 4, 5, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 4, 5, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 5 ]
[ 0, 1, 2, 2, 3, 4, 5 ]


10.do{(0..5).sputter(0.5, 6).postln;};
[ 0, 0, 0, 1, 1, 2 ]
[ 0, 1, 2, 2, 3, 3 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 1, 1, 1, 1 ]
[ 0, 0, 0, 1, 1, 2 ]
[ 0, 1, 2, 2, 3, 3 ]
[ 0, 1, 2, 2, 2, 2 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 1, 2, 3, 4 ]
[ 0, 1, 1, 2, 3, 4 ]
10.do{(0..5).sputter(0.5, 100).postln;};
[ 0, 1, 2, 2, 2, 2, 2, 2, 3, 4, 5 ]
[ 0, 1, 2, 2, 3, 3, 4, 4, 5 ]
[ 0, 0, 0, 1, 2, 3, 4, 4, 5, 5, 5 ]
[ 0, 0, 1, 1, 1, 1, 2, 3, 3, 3, 3, 4, 5 ]
[ 0, 0, 0, 0, 1, 2, 3, 4, 4, 5 ]
[ 0, 0, 1, 1, 2, 2, 2, 2, 2, 3, 3, 4, 5, 5, 5 ]
[ 0, 0, 1, 1, 2, 3, 4, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 0, 1, 1, 1, 2, 3, 3, 4, 5 ]
[ 0, 0, 1, 2, 2, 3, 3, 3, 4, 5, 5 ]
[ 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 4, 5, 5 ]



10.do{(0..5).sputter(0.6, 6).postln;};
[ 0, 1, 1, 2, 2, 2 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 1, 1, 2, 3 ]
[ 0, 0, 0, 1, 2, 3 ]
[ 0, 1, 1, 1, 1, 2 ]
[ 0, 1, 1, 2, 3, 3 ]
[ 0, 1, 1, 1, 1, 2 ]
[ 0, 0, 0, 1, 1, 2 ]
[ 0, 0, 1, 2, 2, 3 ]
[ 0, 0, 0, 0, 0, 0 ]

10.do{(0..5).sputter(0.6, 100).postln;};
[ 0, 0, 1, 1, 1, 2, 3, 3, 3, 3, 3, 4, 5, 5, 5 ]
[ 0, 0, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5, 5 ]
[ 0, 0, 1, 2, 3, 3, 3, 3, 4, 4, 4, 5 ]
[ 0, 0, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 5 ]
[ 0, 1, 1, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 5, 5 ]
[ 0, 1, 2, 3, 3, 4, 5 ]
[ 0, 1, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 5 ]
[ 0, 1, 1, 2, 2, 2, 2, 3, 3, 4, 5 ]
[ 0, 0, 0, 1, 2, 3, 3, 3, 4, 4, 5, 5 ]
[ 0, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 4, 4, 4, 5 ]
-> 10

10.do{(0..5).sputter(0.7, 6).postln;};
[ 0, 0, 0, 0, 1, 1 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 1, 2, 3, 3, 3 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 1, 1, 2, 2 ]
[ 0, 0, 0, 0, 1, 1 ]
[ 0, 0, 0, 1, 2, 3 ]
[ 0, 0, 0, 0, 1, 2 ]
[ 0, 1, 1, 2, 2, 3 ]
[ 0, 1, 1, 2, 2, 3 ]
10.do{(0..5).sputter(0.7, 100).postln;};
[ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5 ]
[ 0, 0, 0, 0, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 5 ]
[ 0, 0, 0, 0, 1, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5 ]
[ 0, 0, 1, 1, 2, 2, 3, 4, 5, 5, 5, 5, 5 ]
[ 0, 0, 1, 1, 2, 2, 2, 3, 4, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ]
[ 0, 1, 1, 1, 2, 2, 2, 3, 4, 4, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 0, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5 ]
[ 0, 1, 1, 1, 1, 1, 1, 2, 3, 4, 5, 5, 5, 5, 5 ]
[ 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 5, 5, 5, 5 ]




10.do{(0..5).sputter(0.8, 6).postln;};
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 1, 1, 1, 2, 2 ]
[ 0, 0, 1, 2, 2, 2 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 1, 1, 1 ]
[ 0, 0, 1, 1, 1, 1 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 1, 1, 1 ]
10.do{(0..5).sputter(0.8, 100).postln;};
[ 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5 ]
[ 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 5 ]
[ 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5 ]
[ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5 ]
[ 0, 0, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4, 5, 5, 5, 5 ]
[ 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 4, 5, 5 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5 ]
[ 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ]
[ 0, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5 ]


10.do{(0..5).sputter(0.9, 6).postln;};
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 1, 1, 1 ]
[ 0, 0, 0, 1, 1, 1 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 1, 1, 1, 1, 1 ]
[ 0, 0, 0, 0, 0, 1 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 1, 1, 1, 1, 2 ]
10.do{(0..5).sputter(0.9, 100).postln;};
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 5, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5 ]
[ 0, 0, 0, 0, 1, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5 ]
[ 0, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 5, 5, 5, 5, 5, 5 ]


10.do{(0..5).sputter(1.0, 6).postln;};
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0 ]
10.do{(0..5).sputter(1.0, 100).postln;};
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]
[ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 ]



Arguments:
probability
Probability of repeat.

maxlen
The length of the new Array.




[(0..5), (0..5)].allTuples;
-> [ [ 0, 0 ], [ 0, 1 ], [ 0, 2 ], [ 0, 3 ], [ 0, 4 ], [ 0, 5 ], [ 1, 0 ], [ 1, 1 ], [ 1, 2 ], [ 1, 3 ], [ 1, 4 ], [ 1, 5 ], [ 2, 0 ], [ 2, 1 ], [ 2, 2 ], [ 2, 3 ], [ 2, 4 ], [ 2, 5 ], [ 3, 0 ], [ 3, 1 ], [ 3, 2 ], [ 3, 3 ], [ 3, 4 ], [ 3, 5 ], [ 4, 0 ], [ 4, 1 ], [ 4, 2 ], [ 4, 3 ], [ 4, 4 ], [ 4, 5 ], [ 5, 0 ], [ 5, 1 ], [ 5, 2 ], [ 5, 3 ], [ 5, 4 ], [ 5, 5 ] ]



										// write to a .png
~aplot = (0..5).slide(5,2).plot(bounds: Rect(left: 0, top: 400, width: 600, height: 400),discrete: false, numChannels: 1, separately: false );
i = Image.fromWindow(~aplot.parent, ~aplot.interactionView.bounds);
i.write("~/desktop/slide(5,2).png".standardizePath);
i.free;


// Start/
(
p = Pbindef(\forward,
    \instrument, \DcOuts,
	\stretch,4,
	\legato,1,
	\bus,Pseq((0..5).stutter(4),1) + ~lightsBus.index,
    \amp,1,
    \env, Pseq([
		[Env.perc(0.001,0.999,1,4)]
    ],inf),
	\dur, Pseq([1/8],inf),
    \finish, ~beatsToSeconds
);
)

(
var lightsAddr = ~lightsAddr;

Pfset(
	func:{lightsAddr.sendMsg('/startrec',"startrec".postln)},
	pattern:p ,
	cleanupFunc:{lightsAddr.sendMsg('/stoprec',"stoprec".postln)}
).play(~metro.base ,quant:~metro.base.beatsPerBar);
)

p.play(~metro.base ,quant:~metro.base.beatsPerBar);

x = [ 1, 2, "foo"];
y = x.foldExtend(7);
x.postln;
y.postln;